<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>#!/bin/bash

##  Filename: semaphore.bash.inc

##  Blocking other processes by running the function as a
##  process to occupy flock semFile.
lkrRun()
{
    {
        flock -x 5
        while :; do
            sleep 30
        done
    } 5&gt;/tmp/semFile
}

semInit()
{
    local semValArgInit="$1"
    { [ -z "$semValArgInit" ] || [ $semValArgInit -lt 0 ] } &amp;&amp; semValArgInit=0
    echo $semValArgInit &gt;/tmp/semVal
    rm -f /tmp/lkrPid
    touch /tmp/auxFile
    touch /tmp/semFile
}

semWait()
{
    local semValTmp
    while :; do
        flock -x 5
        [ $(cat /tmp/semVal) -eq 0 ] || {
            semValTmp=$(cat /tmp/semVal)
            let semValTmp--
            echo $semValTmp &gt;/tmp/semVal
            flock -u 5
            break
        }
        { [ -f /tmp/lkrPid ] &amp;&amp; kill -0 $(cat /tmp/lkrPid); } || {
            lkrRun &amp;
            echo $! &gt;/tmp/lkrPid
        }
        flock -u 5

        ##  Block point to prevent processes from busying at looping.
        ##  It should still work without it but just become
        ##  inefficient.
        flock -x 6

        flock -u 6
    done 5&gt;/tmp/auxFile 6&gt;/tmp/semFile
}

semPost()
{
    local semValTmp
    {
        flock -x 5
        semValTmp=$(cat /tmp/semVal)
        let semValTmp++
        echo $semValTmp &gt;/tmp/semVal

        ##  Kill the whole locker's process group to relinquish
        ##  flock semFile and resume processes blocked on it.
        [ -f /tmp/lkrPid ] &amp;&amp; kill -9 -- -$(cat /tmp/lkrPid)

        rm -f /tmp/lkrPid
    } 5&gt;/tmp/auxFile
}</p></body></html>
