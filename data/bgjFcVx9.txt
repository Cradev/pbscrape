<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
class Squadra {
	int gol_fatti, gol_subiti, punti_fatti, partite_giocate;
public:
	int diffgol;
	float attacco, difesa;
	void segnagol(int);
	void subiscigol(int);
	void vincipartita(void);
	void pareggiapartita(void);
	int punti(void);
	int golfatti(void);
	int golsubiti(void);
	int partitegiocate(void);
	void squadradifabbrica(char*, float, float);
	char nome[256];
	void giocapartita(void);
};

void Squadra::segnagol(int a) {
	gol_fatti = gol_fatti + a;
}

void Squadra::giocapartita(void) {
	partite_giocate++;
}

void Squadra::subiscigol(int a) {
	gol_subiti = gol_subiti + a;
}

void Squadra::vincipartita(void) {
	punti_fatti = punti_fatti + 3;
}

void Squadra::pareggiapartita(void) {
	punti_fatti = punti_fatti + 1;
}

int Squadra::punti(void) {
	return punti_fatti;
}

int Squadra::partitegiocate(void) {
	return partite_giocate;
}

int Squadra::golfatti(void) {
	return gol_fatti;
}

int Squadra::golsubiti(void) {
	return gol_subiti;
}

void Squadra::squadradifabbrica(char* a, float b, float c) {
	gol_fatti = 0;
	gol_subiti = 0;
	punti_fatti = 0;
	partite_giocate = 0;
	diffgol = 0;
	attacco = b;
	difesa = c;
	strcpy_s(nome, a);
}

class Risultato {
public:
	int golcasa, goltrasferta;
	void impostarisultato(int, int);
};

void Risultato::impostarisultato(int a, int b) {
	golcasa = a;
	goltrasferta = b;
}

Risultato Partita(Squadra, Squadra);

int main() {
	srand(time(NULL));
	int n, m;
	bool stampapunti = true;
	bool stamparisultati = false;
	Risultato ris;
	Squadra Udinese, Palermo, Pescara, Chievo, Juventus, Napoli, Fiorentina, Milan, Roma, Lazio, Crotone, Sampdoria, Genoa, Bologna, Cagliari, Torino, Sassuolo, Inter, Empoli, Atalanta;
	Udinese.squadradifabbrica("Udinese", 1.3, 1.5);
	Palermo.squadradifabbrica("Palermo", 1.3, 1);
	Pescara.squadradifabbrica("Pescara", 1.2, 1.1);
	Chievo.squadradifabbrica("Chievo", 1.1, 1.6);
	Juventus.squadradifabbrica("Juve", 2, 2);
	Napoli.squadradifabbrica("Napoli", 1.9, 1.7);
	Fiorentina.squadradifabbrica("Fioren.", 1.6, 1.5);
	Milan.squadradifabbrica("Milan", 1.6, 1.6);
	Roma.squadradifabbrica("Roma", 1.9, 1.6);
	Lazio.squadradifabbrica("Lazio", 1.5, 1.7);
	Crotone.squadradifabbrica("Crotone", 1.2, 1.1);
	Sampdoria.squadradifabbrica("Samp", 1.6, 1.4);
	Genoa.squadradifabbrica("Genoa", 1.4, 1.5);
	Bologna.squadradifabbrica("Bologna", 1.3, 1.4);
	Cagliari.squadradifabbrica("Cagl.", 1.5, 1.2);
	Torino.squadradifabbrica("Torino", 1.7, 1.6);
	Sassuolo.squadradifabbrica("Sass.", 1.5, 1.4);
	Inter.squadradifabbrica("Inter", 1.7, 1.6);
	Empoli.squadradifabbrica("Empoli", 1.3, 1.2);
	Atalanta.squadradifabbrica("Atal.", 1.4, 1.4);
	Squadra campionato[256] = { Udinese, Palermo, Pescara, Chievo, Juventus, Napoli, Fiorentina, Milan, Roma, Lazio, Crotone, Sampdoria, Genoa, Bologna, Cagliari, Torino, Sassuolo, Inter, Empoli, Atalanta };
	for (n = 0; n&lt;20; n++) {
		for (m = 0; m&lt;20; m++) {
			if (campionato[n].nome != campionato[m].nome) {
				ris = Partita(campionato[n], campionato[m]);
				campionato[n].segnagol(ris.golcasa);
				campionato[n].subiscigol(ris.goltrasferta);
				campionato[m].segnagol(ris.goltrasferta);
				campionato[m].subiscigol(ris.golcasa);
				campionato[n].giocapartita();
				campionato[m].giocapartita();
				if (ris.golcasa&gt;ris.goltrasferta) campionato[n].vincipartita();
				if (ris.golcasa &lt; ris.goltrasferta) campionato[m].vincipartita();
				if (ris.golcasa == ris.goltrasferta) {
					campionato[m].pareggiapartita();
					campionato[n].pareggiapartita();
				}
				campionato[m].diffgol = campionato[m].golfatti() - campionato[m].golsubiti();
				campionato[n].diffgol = campionato[n].golfatti() - campionato[n].golsubiti();
				if (stamparisultati) printf("%s %d-%d %s\n\n", campionato[n].nome, ris.golcasa, ris.goltrasferta, campionato[m].nome);
			}
		}
	}
	if (stampapunti&amp;stamparisultati) printf("\n\n\n\n\n\n\n\n");
	Squadra classifica[256];
	Squadra appo;
	for (int k = 0; k &lt; 20; k++) classifica[k] = campionato[k];
	for (int volte = 0; volte&lt;20; volte++) {
		for (int indice = 0; indice&lt;20; indice++) {
			bool sorpasso = ((classifica[indice].punti() &lt; classifica[indice + 1].punti()) || ((classifica[indice].punti() == classifica[indice + 1].punti())&amp;(classifica[indice].diffgol &lt; classifica[indice + 1].diffgol)));
			if (sorpasso) {
				appo = classifica[indice];
				classifica[indice] = classifica[indice + 1];
				classifica[indice + 1] = appo;
			}
		}
	}
	if (stampapunti) {
		printf("Squadra\t   Punti\t   Gol fatti\t  Gol subiti \t Differenza gol");
		for (n = 0; n&lt;20; n++) {
			printf("\n\n%s\t\t%d\t\t%d\t\t%d\t\t%d\n\n", classifica[n].nome, classifica[n].punti(), classifica[n].golfatti(), classifica[n].golsubiti(), classifica[n].diffgol);
		}
	}
	system("pause");
	return 0;
}

Risultato Partita(Squadra sq1, Squadra sq2) {
	float seedcasa = 10 * ((rand()) / 32767.0);
	float seedtrasferta = 10 * ((rand()) / 32767.0);
	float coeffcasa = sq1.attacco / sq2.difesa;
	float coefftrasferta = sq2.attacco / sq1.difesa;
	float parzialecasa = (0.15 + 0.06*coeffcasa)*exp(0.35*seedcasa) + 0.2*(1 + coeffcasa);
	float parzialetrasferta = (0.15 + 0.06*coefftrasferta)*exp(0.35*seedtrasferta) + 0.2*(1 + coefftrasferta);
	int golcasa = floor(parzialecasa);
	int goltrasferta = floor(parzialetrasferta);
	Risultato a;
	a.impostarisultato(golcasa, goltrasferta);
	return a;
}</string.h></time.h></math.h></stdlib.h></stdio.h></p></body></html>
