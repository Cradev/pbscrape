<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>from PIL import Image, ImageDraw
import random

IMG_SIZE = (24, 24)
POLY_SIZE = (4, 5)
ELLI_SIZE = (4, 4)
SAMPLE_COUNT = 1000
ZONE = ((0, 23), (8, 23), (17, 23),
	(0, 15), (8, 15), (17, 15), 
	(0, 6), (8, 6), (17, 6))

def makeSomeNoise (draw):
	for i in range(0, random.randint(0, 9)):
		draw.point([(random.randint(0, 23)), (random.randint(0, 23))])

def fillFig():
    if random.randint(1, 100) &gt; 15: color = "white"
    else: color = "black"
    return color
	
def offsetFig (i, Zone):
        cord = []
        if Zone[i][0] == 0:
                cord = [(Zone[i][0] + random.randint(0, 2), Zone[i][1] + random.randint(-2, 0))]
        elif Zone[i][0] == 8:
                cord = [(Zone[i][0] + random.randint(- 1, 3), Zone[i][1] + random.randint(-2, 0))]
        elif Zone[i][0] == 17:
                cord = [(Zone[i][0] + random.randint(- 1, 2), Zone[i][1] + random.randint(-2, 0))]
        return cord

def getArray(img):
        array = []
        for i in range(24):
                for j in range(24):
                        if img.getpixel((i,j)) == 0: bit = 1
                        else: bit = 0
                        array.append(bit)
        return array

def createImg():
        f = open('samples.txt', 'w' )
        for imgcnt in range(SAMPLE_COUNT):
                img = Image.new("L", IMG_SIZE, 'white')
                draw = ImageDraw.Draw(img)
                randZone = list(ZONE)
                random.shuffle(randZone)
                figCount = random.randint(1, 9)
                polyCount = random.randint(1, figCount)
                elliCount = figCount - polyCount
                for i in range(polyCount):
                        color = fillFig()
                        start = offsetFig(i, randZone)
                        draw.polygon([start[0],
                              (start[0][0] + POLY_SIZE[0]/2, start[0][1] - POLY_SIZE[1]),
                              (start[0][0] + POLY_SIZE[0], start[0][1])],
                              fill = color, outline = "black")
                for i in range(polyCount, figCount):
                        color = fillFig()
                        start = offsetFig(i, randZone)
                        draw.ellipse([start[0][0],
                              start[0][1] - 4,
                              start[0][0] + ELLI_SIZE[0],
                              start[0][1] + ELLI_SIZE[1] - 4])
                makeSomeNoise (draw)
                for item in getArray(img):
                        f.write("%s" % item)
                f.write("\n")
                img.save('samples/image%s.png' % imgcnt)
                img.close()
        f.close()

createImg()</p></body></html>
