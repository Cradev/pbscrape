<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>/* &#1042;&#1074;&#1077;&#1089;&#1090;&#1080; n &#1080; &#1095;&#1080;&#1089;&#1083;&#1072; a[1], a[2],...,a[n]. &#1042;&#1099;&#1095;&#1080;&#1089;&#1083;&#1080;&#1090;&#1100; &#1080; &#1074;&#1099;&#1074;&#1077;&#1089;&#1090;&#1080; &#1082;&#1086;&#1101;&#1092;&#1092;&#1080;&#1094;&#1080;&#1077;&#1085;&#1090;&#1099; &#1084;&#1085;&#1086;&#1075;&#1086;&#1095;&#1083;&#1077;&#1085;&#1072;.
   p(x) = (x-a[1])*(x-a[2])*...*(x-a[n]) (&#1085;&#1072;&#1087;&#1080;&#1089;&#1072;&#1090;&#1100; &#1092;&#1091;&#1085;&#1082;&#1094;&#1080;&#1102; &#1076;&#1083;&#1103; &#1091;&#1084;&#1085;&#1086;&#1078;&#1077;&#1085;&#1080;&#1103; &#1076;&#1074;&#1091;&#1093; &#1084;&#1085;&#1086;&#1075;&#1086;&#1095;&#1083;&#1077;&#1085;&#1086;&#1074;)*/

#include <stdio.h>
#include <stdlib.h>

int *polyMulti(int *a, int *b, int *size_a, int *size_b);
void printMulti(int **array, int *size);
void printPolynom(int *array, int *size);

int main() {

	int n = 0;
	printf("set n. ");
	scanf_s("%d", &amp;n);
	while (n &lt;= 0) {
		printf("set other n. ");
		scanf_s("%d", &amp;n);
	}
	if (n == 1) {
		printf("enter the number. ");
		int a;
		scanf_s("%d", &amp;a);
		printf("p(x) = ");
		if (a &gt; 0) {
			printf("x - %d", a);
		}
		else if (a &lt; 0) {
			printf("x + %d", a*-1);
		}
		else {
			printf("x");
		}
		printf("\n");
		return 0;
	}

	//creating n arrays of lentgh 2
	int **arr = (int**)malloc(n * sizeof(int*));
	int i = 0;
	for (i = 0; i &lt; n; ++i) {
		arr[i] = (int*)malloc(2 * sizeof(int));
	}

	//filling arrays with original polynomials
	printf("enter the numbers. ");
	for (i = 0; i &lt; n; ++i) {
		scanf_s("%d", &amp;arr[i][0]);
		arr[i][0] *= -1;
		arr[i][1] = 1;
	}

	printMulti(arr, &amp;n);
	
	//perfoming product as a multiplication
	//of two consistent polynomials
	int initial_degree = 2;
	int dynamic_degree = initial_degree;
	int *product = polyMulti(arr[0], arr[1], &amp;dynamic_degree, &amp;initial_degree);
	dynamic_degree += initial_degree - 1;
	for (i = 2; i &lt; n; ++i) {
		product = polyMulti(product, arr[i], &amp;dynamic_degree, &amp;initial_degree);
		dynamic_degree += initial_degree - 1;
	}

	printPolynom(product, &amp;dynamic_degree);
	
	for (i = 0; i &lt; n; ++i) {
		free(arr[i]);
	}
	free(arr);
	free(product);
	return 0;
}

//a function to multiply two polinomials
int *polyMulti(int *a, int *b, int *size_a, int *size_b) {
	int *product = (int*)calloc(*size_a + *size_b - 1, sizeof(int));
	for (int i = 0; i &lt; *size_a; ++i) {
		//every term of first polynomial is being multiplied
		//by every term of second polynomial
		for (int j = 0; j &lt; *size_b; ++j)
			product[i + j] += a[i] * b[j];
	}
	return product;
}

//a function to print an expression
//as a multiplication of original polynomials
void printMulti(int **array, int *size) {
	printf("p(x) = ");
	for (int i = 0; i &lt; *size; ++i) {
		if (array[i][0] &lt; 0) {
			printf("(x - %d)", array[i][0] * -1);
		}
		else if (array[i][0] &gt; 0) {
			printf("(x + %d)", array[i][0]);
		}
		else {
			printf("x");
		}
	}
	printf(" = ");
}

//a function to print a final polynomial
void printPolynom(int *array, int *size) {
	//to print the largest degree term without coefficient
	printf("x^%d ", *size - 1);
	
	//to print all the rest except last two
	for (int i = *size - 2; i &gt; 1; --i) {
		if (array[i] &gt; 0) {
			printf("+ %dx^%d ", array[i], i);
		}
		else if (array[i] &lt; 0) {
			printf("- %dx^%d ", array[i] * -1, i);
		}
	}

	//to print k1'x' and k0
	if (array[1] &gt; 0) {
		printf("+ %dx ", array[1]);
	}
	else if (array[1] &lt; 0) {
		printf("- %dx ", array[1] * -1);
	}
	if (array[0] &gt; 0) {
		printf("+ %d ", array[0]);
	}
	else if (array[0] &lt; 0) {
		printf("- %d ", array[0] * -1);
	}
	printf("\n");
}</stdlib.h></stdio.h></p></body></html>
