<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>#include "stdafx.h"
#include <conio.h>
#include <malloc.h>
// znak &amp; przed zmienna k oznacza zezwolenie na jej modyfikowanie przez funkcj&#281;
void nowy_pomiar(float **Wyniki, const int p, const int z, int &amp;k)
{	
	if ( k &lt; p)	// zabezpieczenie przed przekroczeniem tablicy przy dodawaniu kolejnych pomiar&oacute;w
	{
		// p&#281;tla zapisuj&#261;ca dodatkowy pomiar po kolei ka&#380;demu zawodnikowi
		for (int i = 0; i &lt; z; i++)		
		{
			printf("\nCzas %d zawodnika: ", i+1);
			scanf("%f", &amp;Wyniki[i][k]);
		}
	k++;	// zwi&#281;kszamy stan licznika wykonanych pomiar&oacute;w
	}
	else
		printf("Nie mozna dodac wiecej pomiarow");
}

void wyczysc(float **Wyniki, const int z, int &amp;k)
{
	for (int i = 0 ; i &lt; z; i++) //  czy&#347;cimy tablic&#281; z wszystkich pomiar&oacute;w
	// nie potrzebujemy czy&#347;ci&#263; ca&#322;ej tablicy,tyle ile wykonano pomiar&oacute;w (j &lt; k, a nie j &lt; p)
		for (int j = 0; j &lt; k; j++)	
			Wyniki[i][j] = NULL;
	k = 0;			// po wyczyszczeniu tablicy resetujemy licznik wykonanych pomiar&oacute;w
}

void wyswietl(float **Wyniki, const int z, const int k)
{
	printf("\nZawodnicy\n");
	// wy&#347;wietlamy wszystkie przeprowadzone pomiary
	for (int i = 0; i &lt; z; i++)
	{
		printf("\nnr %d | ", i+1);
		for (int j = 0; j &lt; k; j++)
			printf("\t%.2f", Wyniki[i][j]);
		printf("\n\n");
	}
}
void wyswietl_najgorsze( float **Wyniki, const int z, const int k)
{
	float worse;	// zmienna przechowuj&#261;ca najgorszy czas po kolei dla ka&#380;dego zawonika
	printf("\nNajgorsze czasy zawodnikow\n");
	// sprawdzamy po kolei ka&#380;dego zawodnika
	for(int i = 0; i &lt; z; i++)
	{
		worse = Wyniki[i][0]; // przypisujemy na start pierwszy pomiar sprawdzanego zawodnika
		for(int j = 0; j &lt; k; j++)
			if(Wyniki[i][j] &gt; worse) // je&#347;li nast&#281;pny czas jest d&#322;u&#380;szy to go zapisujemy
				worse = Wyniki[i][j];
		// wy&#347;wietlamy najgorszy czas zawodnika i przechodzimy do nast&#281;pnego zawodnika
		printf("\nnr %d - %.2f ", i+1, worse);
	}
	printf("\n");
}

void wyswietl_najlepsze( float **Wyniki, const int z, const int k)
{
	float best;
	printf("\nNajlepsze czasy zawodnikow\n");
	for(int i = 0; i &lt; z; i++)
	{
		best = Wyniki[i][0];
		for(int j = 0; j &lt; k; j++)
			if(Wyniki[i][j] &lt; best)
				best = Wyniki[i][j];
		printf("\nnr %d - %.2f ", i+1, best);
	}
	printf("\n");
}

int main()
{
	// p - maksymalna liczba pomiar&oacute;w, z - liczba zawodnik&oacute;w, w - wybran aopcja z menu, k = aktualna liczba przeprowadzonych pomiar&oacute;w
	int p, z, w, k = 0;	
	float ** Wyniki;

	printf("Podaj maksymalna liczbe pomiarow: "); scanf("%d", &amp;p);
	printf("Podaj liczbe zawodnikow: "); scanf("%d", &amp;z);
	
	Wyniki = (float**)malloc(z * sizeof(float*)); // w wierszach mamy zawodnik&oacute;w
	for (int i = 0; i &lt; z; i++)
		Wyniki[i] = (float*)malloc(p * sizeof(float)); // w kolumnach mamy pomiary zawodnik&oacute;w
	do
	{
		//wy&#347;wietlamy menu u&#380;ytkownikowi
		printf("\n1. Nowy pomiar\n2. Wyczysc tabele pomiarow\n3. Wyswietl wszystkie wyniki zawodnikow\n4. Wyswietl najlepsze wyniki zawodnikow\n5. Wyswietl najgorsze wyniki zawodnikow\n0. Zakoncz program\n");
		scanf("%d", &amp;w);	// zapisujemy wybran&#261; opcj&#281;

		switch (w)	// sprawdzamy wyb&oacute;r i wykonujemy wybrane dzia&#322;anie
		{
			case 1: nowy_pomiar(Wyniki, p, z, k); break;
			case 2: wyczysc(Wyniki, z, k); break;
			case 3: wyswietl(Wyniki, z, k); break;
			case 4: wyswietl_najlepsze(Wyniki, z, k); break;
			case 5: wyswietl_najgorsze(Wyniki, z, k); break;
			case 0: {}; break;
			default: printf("Nie ma takiej opcji w menu"); break;
		}
	} while (w); //p&#281;tla trwa tak d&#322;ugo p&oacute;ki nie podamy 0
	
	//zwalnianie pami&#281;ci zajmowanej przez tablic&#281; dwuwymiarow&#261;
	for (int i = 0; i &lt; p; i++) 
		free(Wyniki[i]);	// najpierw zwalniamy poszczeg&oacute;lne wiersze tablicy dwuwymiarowej
	free(Wyniki);			// nast&#281;pnie sam&#261; tablic&#281;
	_getch();
	return 0;
}</malloc.h></conio.h></p></body></html>
