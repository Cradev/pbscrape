<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>public class Node {
Node leftChild;
Node rightChild;
Node frontChild;

public Node(Node firstChild, Node secondChild, Node thirdChild){
    this.leftChild = firstChild;
    this.rightChild = secondChild;
    this.frontChild = thirdChild;
}

public ArrayList<node> getChildren(){
    ArrayList<node> childNodes = new ArrayList&lt;&gt;();
    if(this.leftChild != null)
    {
        childNodes.add(leftChild);
    }
    if(this.rightChild != null) {
        childNodes.add(rightChild);
    }
    if(this.frontChild != null){
        childNodes.add(frontChild);
    }
    return childNodes;
}

public boolean removeChild(Node n){
    return false;
}
	
public class BreadthFirstSearch {

Node startNode;
Node goalNode;

public BreadthFirstSearch(Node start, Node goalNode){
    this.startNode = start;
    this.goalNode = goalNode;
}

public boolean compute(){

    if(this.startNode.equals(goalNode)){
        System.out.println("Goal Node Found!");
        System.out.println(startNode);
    }

    Queue<node> queue = new LinkedList&lt;&gt;();
    ArrayList<node> explored = new ArrayList&lt;&gt;();
    queue.add(this.startNode);
    explored.add(startNode);

    while(!queue.isEmpty()){
        Node current = queue.remove();
        if(current.equals(this.goalNode)) {
            System.out.println(explored);
            return true;
        }
        else{
            if(current.getChildren().isEmpty())
                return false;
            else
                queue.addAll(current.getChildren());
        }
        explored.add(current);
    }
    return false;
}</node></node></node></node></p></body></html>
