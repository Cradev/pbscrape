<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>local ambiences

local smallfire = {
	handler = {},
	{name = "fire_small", length = 6}
}

local largefire = {
	handler = {},
	{name = "fire_large", length = 8}
}


-- check where player is and which sounds are played
local radius = 6
local num_fire

local get_ambience = function(player)
	local pos = player:getpos()
	local ps, cn = minetest.find_nodes_in_area(
		{x = pos.x - radius, y = pos.y - radius, z = pos.z - radius},
		{x = pos.x + radius, y = pos.y + radius, z = pos.z + radius},
		{"fire:basic_flame", "fire:permanent_flame"}
	)
	num_fire = (cn["fire:basic_flame"] or 0) +
		(cn["fire:permanent_flame"] or 0)
	if num_fire &gt; 8 then
		return {largefire = largefire}
	elseif num_fire &gt; 0 then
		return {smallfire = smallfire}
	end
end


-- play sound, set handler then delete handler when sound finished
local play_sound = function(player_name, list)
	if list.handler[player_name] == nil then
		local handler = minetest.sound_play(list[1].name, {
			to_player = player_name,
			gain = 0.3
		})
		if handler then
			list.handler[player_name] = handler
			minetest.after(
				list[1].length,
				function(args)
					local list = args[1]
					local player_name = args[2]
					if list.handler[player_name] then
						minetest.sound_stop(list.handler[player_name])
						list.handler[player_name] = nil
					end
				end,
				{list, player_name}
			)
		end
	end
end


-- stop sound in still_playing
local stop_sound = function (list, player_name)
	if list.handler[player_name] then
		minetest.sound_stop(list.handler[player_name])
		list.handler[player_name] = nil
	end
end


-- check sounds that are not in still_playing
local still_playing = function(still_playing, player_name)
	if not still_playing.smallfire then
		stop_sound(smallfire, player_name)
	end
	if not still_playing.largefire then
		stop_sound(largefire, player_name)
	end
end


-- player routine
local timer = 0
minetest.register_globalstep(function(dtime)
	timer = timer + dtime
	if timer &lt; 2 then
		return
	end

	timer = 0
	local players = minetest.get_connected_players()
	for n = 1, #players do
		local player_name = players[n]:get_player_name()
		ambiences = get_ambience(players[n])
		if ambiences then
			still_playing(ambiences, player_name)
			for _, ambience in pairs(ambiences) do
				play_sound(player_name, ambience)
			end
		end
	end
end)</p></body></html>
