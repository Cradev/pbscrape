<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>using System;
using System.Linq;

namespace Recognizer
{
	internal static class MedianFilterTask
	{
		/* 
		 * &#1044;&#1083;&#1103; &#1073;&#1086;&#1088;&#1100;&#1073;&#1099; &#1089; &#1087;&#1080;&#1082;&#1089;&#1077;&#1083;&#1100;&#1085;&#1099;&#1084; &#1096;&#1091;&#1084;&#1086;&#1084;, &#1087;&#1086;&#1076;&#1086;&#1073;&#1085;&#1099;&#1084; &#1090;&#1086;&#1084;&#1091;, &#1095;&#1090;&#1086; &#1085;&#1072; &#1080;&#1079;&#1086;&#1073;&#1088;&#1072;&#1078;&#1077;&#1085;&#1080;&#1080;,
		 * &#1086;&#1073;&#1099;&#1095;&#1085;&#1086; &#1087;&#1088;&#1080;&#1084;&#1077;&#1085;&#1103;&#1102;&#1090; &#1084;&#1077;&#1076;&#1080;&#1072;&#1085;&#1085;&#1099;&#1081; &#1092;&#1080;&#1083;&#1100;&#1090;&#1088;, &#1074; &#1082;&#1086;&#1090;&#1086;&#1088;&#1086;&#1084; &#1094;&#1074;&#1077;&#1090; &#1082;&#1072;&#1078;&#1076;&#1086;&#1075;&#1086; &#1087;&#1080;&#1082;&#1089;&#1077;&#1083;&#1103;, 
		 * &#1079;&#1072;&#1084;&#1077;&#1085;&#1103;&#1077;&#1090;&#1089;&#1103; &#1085;&#1072; &#1084;&#1077;&#1076;&#1080;&#1072;&#1085;&#1091; &#1074;&#1089;&#1077;&#1093; &#1094;&#1074;&#1077;&#1090;&#1086;&#1074; &#1074; &#1085;&#1077;&#1082;&#1086;&#1090;&#1086;&#1088;&#1086;&#1081; &#1086;&#1082;&#1088;&#1077;&#1089;&#1090;&#1085;&#1086;&#1089;&#1090;&#1080; &#1087;&#1080;&#1082;&#1089;&#1077;&#1083;&#1103;.
		 * https://en.wikipedia.org/wiki/Median_filter
		 * 
		 * &#1048;&#1089;&#1087;&#1086;&#1083;&#1100;&#1079;&#1091;&#1081;&#1090;&#1077; &#1086;&#1082;&#1085;&#1086; &#1088;&#1072;&#1079;&#1084;&#1077;&#1088;&#1086;&#1084; 3&#1093;3 &#1076;&#1083;&#1103; &#1085;&#1077; &#1075;&#1088;&#1072;&#1085;&#1080;&#1095;&#1085;&#1099;&#1093; &#1087;&#1080;&#1082;&#1089;&#1077;&#1083;&#1077;&#1081;,
		 * &#1054;&#1082;&#1085;&#1086; &#1088;&#1072;&#1079;&#1084;&#1077;&#1088;&#1086;&#1084; 2&#1093;2 &#1076;&#1083;&#1103; &#1091;&#1075;&#1083;&#1086;&#1074;&#1099;&#1093; &#1080; 3&#1093;2 &#1080;&#1083;&#1080; 2&#1093;3 &#1076;&#1083;&#1103; &#1075;&#1088;&#1072;&#1085;&#1080;&#1095;&#1085;&#1099;&#1093;.
		 */
		public static double[,] MedianFilter(double[,] original)
		{
            for (var i = 0; i &lt; original.GetLength(0); i++)
            {
                for (var j = 0; j &lt; original.GetLength(1); j++)
                {
                    var pixel = original[i, j];
                    string flag;
                    //if ((pixel == 0) || (pixel ==1))
                    //{
                        flag = GetType(original, i, j);
                        switch(flag)
                        {
                            case "corner00":
                                pixel = GetMedian(original, i, j, 2, 2);
                                break;
                            case "corner01":
                                pixel = GetMedian(original, i, j-1, 2, 2);
                                break;
                            case "corner10":
                                pixel = GetMedian(original, i-1, 0, 2, 2);
                                break;
                            case "corner11":
                                pixel = GetMedian(original, i-1, j-1, 2, 2);
                                break;
                            case "verge_0y":
                                pixel = GetMedian(original, i, j-1, 3, 2);
                                break;
                            case "verge_1y":
                                pixel = GetMedian(original, i-1, j-1, 2, 2);
                                break;
                            case "verge_x0":
                                pixel = GetMedian(original, i-1, 0, 2, 3);
                                break;
                            case "verge_x1":
                                pixel = GetMedian(original, i-1, j-1, 3, 2);
                                break;
                            case "normal":
                                pixel = GetMedian(original, i-1, j-1, 3, 3);
                                break;
                        //}
                    }

                }
            }
            return original;
		}
        public static double GetMedian(double[,] original, int x, int y, int counterX, int counterY)
        {
            var colorsOfPixels = new double[counterX*counterY];
            var n = 0;
            for (int i = x; i &lt; x+counterX; i++)
                for (int j = y; j &lt; y+counterY; j++)
                {
                    colorsOfPixels[n] = original[i, j];
                    n++;
                }
            Array.Sort(colorsOfPixels);
            if (colorsOfPixels.Length % 2 == 1)
                return colorsOfPixels[colorsOfPixels.Length / 2];
            return (colorsOfPixels[colorsOfPixels.Length / 2] + colorsOfPixels[colorsOfPixels.Length/2 - 1])/2;
        }
        public static string GetType(double[,] original, int i, int j)
        {
            if (i == 0)
            {
                if (j == 0)
                    return "corner00";
                if (j == original.GetLength(1) - 1)
                    return "corner01";
                return "verge_0y";
            }
            if (i == original.GetLength(0) - 1)
            {
                if (j == 0)
                    return "corner10";
                if (j == original.GetLength(1) - 1)
                    return "corner11";
                return "verge_1y";
            }
            if ((j == 0) &amp;&amp; (i != 0) &amp;&amp; (i != original.GetLength(0) - 1))
                return "verge_x0";
            if ((j == original.GetLength(1) - 1) &amp;&amp; (i != 0) &amp;&amp; (i != original.GetLength(0) - 1))
                return "verge_x1";
            return "normal";
        }
	}
}</p></body></html>
