<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>#include <ethernet.h>
#include <arduinojson.h>
#include <onewire.h>
#include <dallastemperature.h>
 
#define LED 3
 
#define sensorCount 5
const char* sensorNames[] = {"DHT_11_t", "DHT_11_hu", "Brightness", "G_t", "G_hu"};
const char* sensorOurNames[] = {"dht_temp", "dht_hum", "ligth", "temp1", "hum1"};
float sensorValues[sensorCount];
#define DHT_11_t    0
#define DHT_11_hu   1
#define Brightness  2
#define G_t         3
#define G_hu        4
 
 
#define IOT_TIMEOUT1 5000
#define IOT_TIMEOUT2 100
 
long timer_iot_timeout = 0;
 
#define BUFF_LENGTH 32
 
char buff[BUFF_LENGTH] = "";
 
const char iot_server[] = "cttit5402.cloud.thingworx.com";
IPAddress iot_address(52, 87, 101, 142);
const char thingName[] = "Teplichka_8";
const char serviceName[] = "Read_DATA";
 
const byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 250);
IPAddress dnsServerIP(192, 168, 1, 1);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);
EthernetClient client;
 
#define ONE_WIRE_BUS 6
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature ds_sensors(&amp;oneWire);
 
#include "DHT.h"
 
#define DHTPIN 9
 
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
 
#define rainSensor
void setup() {
  pinMode(LED, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  Serial.begin(9600);
  Serial.println("The work begin");
 
  if (Ethernet.begin(mac) == 0)
  {
    Serial.println("Failed to configure Ethernet using DHCP");
    Ethernet.begin(mac, ip, dnsServerIP, gateway, subnet);
  }
//  Serial.print("LocalIP: ");
//  Serial.println(Ethernet.localIP());
//  Serial.print("SubnetMask: ");
//  Serial.println(Ethernet.subnetMask());
//  Serial.print("GatewayIP: ");
//  Serial.println(Ethernet.gatewayIP());
//  Serial.print("dnsServerIP: ");
//  Serial.println(Ethernet.dnsServerIP());
//  Serial.println("");
 
  ds_sensors.begin();
  dht.begin();
}
 
void loop() {
  float hu = analogRead(A0)/8;
  float br = (1023 - analogRead(A1))*100/1024;
  br = br * 100 / 1023;
  float rai = analogRead(A5) / 8;
  float h = dht.readHumidity();
  float ta = dht.readTemperature();
//  Serial.println((rai &lt; 90) ? "RAIN" : "SUN");
  /*Serial.println((br &gt; 500) ? "DARK" : "BRIGHT");
    Serial.println((hu &lt; 50) ? "LOW" : "HIGH");*/
  /*if (hu &gt; 20)
    {
    digitalWrite(5, HIGH);
    }
    else
    {
    digitalWrite(5, LOW);
    }*/
  /*Serial.print("Humidity air: ");
  Serial.print(h);
  Serial.print(" %\t");
  Serial.print("Temperature air: ");
  Serial.print(ta);
  Serial.print(" *C ");
  Serial.print("Humidity ground: ");
  Serial.print(hu);
  Serial.print(" %\t");
  Serial.print(" Brightness: ");
  Serial.println(br);
  Serial.print(" %");*/
  ds_sensors.requestTemperatures();
  float t = ds_sensors.getTempCByIndex(0);
//  Serial.println("Temperature ground: " + String(t, 1) + " *C");
  sensorValues[DHT_11_t] = ta;
  sensorValues[DHT_11_hu] = h;
  sensorValues[Brightness] = br;
  sensorValues[G_t] = t;
  sensorValues[G_hu] = hu;
//  sendDataMyIot();
  delay(1000);
//  sendDataIot();
  delay(1000);
}

void sendDataIot()
{
  Serial.println("Connecting to IoT server...");
  if (client.connect(iot_address, 80))
  {
    if (client.connected())
    {
      Serial.println("Sending data to IoT server...\n");
//      Serial.print("POST /Thingworx/Things/");
      client.print("POST /Thingworx/Things/");
//      Serial.print(thingName);
      client.print(thingName);
//      Serial.print("/Services/");
      client.print("/Services/");
//      Serial.print(serviceName);
      client.print(serviceName);
//      Serial.print("?appKey=");
      client.print("?appKey=");
//      Serial.print(appKey);
      client.print("5f0ced85-2ef8-4f87-9940-16b867659a04");
//      Serial.print("&amp;method=post&amp;x-thingworx-session=true");
      client.print("&amp;method=post&amp;x-thingworx-session=true");
      for (int idx = 0; idx &lt; sensorCount; idx ++)
      {
//        Serial.print("&amp;");
        client.print("&amp;");
//        Serial.print(sensorNames[idx]);
        client.print(sensorNames[idx]);
//        Serial.print("=");
        client.print("=");
//        Serial.print(sensorValues[idx]);
        client.print(sensorValues[idx]);
      }
//      Serial.println(" HTTP/1.1");
      client.println(" HTTP/1.1");
//      Serial.println("Accept: application/json");
      client.println("Accept: application/json");
//      Serial.print("Host: ");
      client.print("Host: ");
//      Serial.println(iot_server);
      client.println(iot_server);
//      Serial.println("Content-Type: application/json");
      client.println("Content-Type: application/json");
//      Serial.println();
      client.println();
 
      timer_iot_timeout = millis();
      while ((client.available() == 0) &amp;&amp; (millis() &lt; timer_iot_timeout + IOT_TIMEOUT1));
 
      int iii = 0;
      bool currentLineIsBlank = true;
      bool flagJSON = false;
      timer_iot_timeout = millis();
      while ((millis() &lt; timer_iot_timeout + IOT_TIMEOUT2) &amp;&amp; (client.connected()))
      {
        while (client.available() &gt; 0)
        {
          char symb = client.read();
          Serial.print(symb);
          if (symb == '{')
          {
            flagJSON = true;
          }
          else if (symb == '}')
          {
            flagJSON = false;
          }
          if (flagJSON == true)
          {
            buff[iii] = symb;
            iii ++;
          }
          timer_iot_timeout = millis();
        }
      }
      buff[iii] = '}';
      buff[iii + 1] = '\0';
      Serial.println(buff);
      client.stop();
 
      StaticJsonBuffer<buff_length> jsonBuffer;
      JsonObject&amp; json_array = jsonBuffer.parseObject(buff);
      int pump_state = json_array["Pompa"];
      digitalWrite(5, 1 - pump_state);
      /*window_state = json_array["window_state"];*/
      int light_state = json_array["Light"];
      analogWrite(LED, light_state);
//      Serial.println("Pump state:   " + String(pump_state));
//      Serial.println("Light state:  " + String(light_state));
      /*Serial.println("Window state: " + String(window_state));*/
//      Serial.println();
 
//      Serial.println("Packet successfully sent!");
//      Serial.println();
    }
  }
}
void sendDataMyIot()
  {
  Serial.println("Connecting to IoT ourserver...");
  if (client.connect("fierce-fortress-64542.herokuapp.com", 80))
  {
    if (client.connected())
    {
      client.print("POST /addvalues");
      client.print("?token=");
      client.print("dvvsdkvr");
      for (int idx = 0; idx &lt; sensorCount; idx ++)
      {
        client.print("&amp;");
        client.print(sensorOurNames[idx]);
        client.print("=");
        client.print(sensorValues[idx]);
      }
      client.print("&amp;temp2=0&amp;hum2=0");
      client.println(" HTTP/1.1");
      client.println("Accept: application/json");
      client.print("Host: ");
      client.println("fierce-fortress-64542.herokuapp.com");
      client.println("Content-Type: application/json");
      client.println();
 
      timer_iot_timeout = millis();
      while ((client.available() == 0) &amp;&amp; (millis() &lt; timer_iot_timeout + IOT_TIMEOUT1));
 
      int iii = 0;
      bool currentLineIsBlank = true;
      bool flagJSON = false;
      timer_iot_timeout = millis();
      while ((millis() &lt; timer_iot_timeout + IOT_TIMEOUT2) &amp;&amp; (client.connected()))
      {
        while (client.available() &gt; 0)
        {
          char symb = client.read();
          Serial.print(symb);
          if (symb == '{')
          {
            flagJSON = true;
          }
          else if (symb == '}')
          {
            flagJSON = false;
          }
          if (flagJSON == true)
          {
            buff[iii] = symb;
            iii ++;
          }
          timer_iot_timeout = millis();
        }
      }
      buff[iii] = '}';
      buff[iii + 1] = '\0';
      Serial.println(buff);
      client.stop();
 
      StaticJsonBuffer<buff_length> jsonBuffer;
      JsonObject&amp; json_array = jsonBuffer.parseObject(buff);
      int pump_state = json_array["pompa"];
      digitalWrite(5, 1 - pump_state);
      /*window_state = json_array["window_state"];*/
      int light_state = json_array["servo"];
      analogWrite(LED, (int)((light_state-10)*2,5));
//      Serial.println("Pump state:   " + String(pump_state));
//      Serial.println("Light state:  " + String(light_state));
      /*Serial.println("Window state: " + String(window_state));*/
//      Serial.println();
 
//      Serial.println("Packet successfully sent!");
//      Serial.println();
    }
  }
 }</buff_length></buff_length></dallastemperature.h></onewire.h></arduinojson.h></ethernet.h></p></body></html>
