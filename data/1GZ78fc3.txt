<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>class Player
{
    static void Main(string[] args)
    {
        string[] inputs;
        int pastX = 0;
        int pastY = 0;
        // game loop
        while (true)
        {
            inputs = Console.ReadLine().Split(' ');
            int x = int.Parse(inputs[0]);
            int y = int.Parse(inputs[1]);
            int nextCheckpointX = int.Parse(inputs[2]); // x position of the next check point
            int nextCheckpointY = int.Parse(inputs[3]); // y position of the next check point
            int nextCheckpointDist = int.Parse(inputs[4]); // distance to the next checkpoint
            int nextCheckpointAngle = int.Parse(inputs[5]); // angle between your pod orientation and the direction of the next checkpoint
            inputs = Console.ReadLine().Split(' ');
            int opponentX = int.Parse(inputs[0]);
            int opponentY = int.Parse(inputs[1]);
            int thrust;
            bool CanBoost = true;
            // Write an action using Console.WriteLine()
            // To debug: Console.Error.WriteLine("Debug messages...");
            
            var point = NextTarget(x, y, pastX, pastY, nextCheckpointX, nextCheckpointY);
            
            if((nextCheckpointAngle == 0) &amp;&amp; (nextCheckpointDist &gt;= 4000) &amp;&amp; (CanBoost == true))
            {
                Console.Error.WriteLine("Debug messages...");
                Console.WriteLine(point.X + " " + point.Y + " BOOST");
                CanBoost = false;
            }
            else if(nextCheckpointAngle &gt;= 90 || nextCheckpointAngle &lt;= -90)
            {
                thrust = 0;
                Console.WriteLine(point.X + " " + point.Y + " " + thrust);
            }
            else
            {
                if(nextCheckpointDist &lt;= 1000)
                {
                    thrust = 80;
                }
                else
                {
                    thrust = 100;
                }
                Console.WriteLine(point.X + " " + point.Y + " " + thrust);
            }
            pastX = x;
            pastY = y;
        }
    }
    private static Point NextTarget(int podX, int podY, int lastX, int lastY, int checkpointX, int checkpointY)
    {
        var vX = (podX - lastX);
        var vY = (podY - lastY);
        var point = new Point
        {
            X = checkpointX - (3*vX),
            Y = checkpointY - (3*vY)
        };
        return point;
    }
}

public class Point
{
    public Point()
    {
    }
    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }
    public int X {get; set;}
    public int Y {get; set;}
}</p></body></html>
