<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>library ieee;
use ieee.std_logic_1164.all;
use work.serial_port_pkg.all;
use work.serial_port_receiver_pkg.all;
use work.serial_port_transmitter_pkg.all;
use work.ram_pkg.all;
use work.sync_pkg.all;

architecture beh of serial_port is

signal sync_rx, fifo_empty, recv_data_new, trans_rd: std_logic;
signal recv_data, fifo_data_out1 					: std_logic_vector(7 downto 0);

signal not_tx_free :std_logic;
begin

tx_free &lt;= not not_tx_free;

serial_sync_inst : sync
	generic map(
		SYNC_STAGES =&gt; SYNC_STAGES,
		RESET_VALUE =&gt; '1'
	)
	port map(
		clk =&gt; clk,
		res_n =&gt; res_n,
		data_in =&gt; rx,
	
		data_out =&gt; sync_rx
	);

serial_port_recv_inst: serial_port_receiver
	generic map(
		CLK_DIVISOR =&gt; CLK_FREQ/BAUD_RATE
	)
	port map(
		clk =&gt; clk,
		res_n =&gt; res_n,
		rx =&gt; sync_rx,
		
		data =&gt; recv_data,
		data_new =&gt; recv_data_new
	);

recv_fifo: fifo_1c1r1w
	generic map(
		MIN_DEPTH =&gt; RX_FIFO_DEPTH,
		DATA_WIDTH =&gt; 8	
	)
	port map(
		clk =&gt; clk,
		res_n =&gt; res_n,
		data_in2 =&gt; recv_data,
		wr2 =&gt; recv_data_new,
		rd1 =&gt; rx_rd,
		
		data_out1 =&gt; rx_data,
		empty =&gt; rx_data_empty,
		full =&gt; rx_data_full
	);

serial_port_trans_inst: serial_port_transmitter
	generic map(
		CLK_DIVISOR =&gt; CLK_FREQ/BAUD_RATE
	)
	port map(
		clk =&gt; clk,
		res_n =&gt; res_n,
		data =&gt; fifo_data_out1,
		empty =&gt; fifo_empty,	

		tx =&gt; tx,
		rd =&gt; trans_rd 
	);

trans_fifo: fifo_1c1r1w
	generic map(
		MIN_DEPTH =&gt; TX_FIFO_DEPTH,
		DATA_WIDTH =&gt; 8	
	)
	port map(
		clk =&gt; clk,
		res_n =&gt; res_n,
		data_in2 =&gt; tx_data,
		wr2 =&gt; tx_wr,
		rd1 =&gt; trans_rd,
		
		data_out1 =&gt; fifo_data_out1,
		empty =&gt; fifo_empty,
		full =&gt; not_tx_free
	);

end beh;</p></body></html>
