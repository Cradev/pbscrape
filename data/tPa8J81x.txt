<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>package psynth.gui.views;

import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.part.*;
import org.eclipse.ui.plugin.AbstractUIPlugin;

import psynth.models.Task;
import psynth.util.TaskList;

import org.eclipse.jface.viewers.*;
import org.eclipse.swt.graphics.Image;

import java.util.Arrays;
import java.util.List;

import org.eclipse.jface.action.*;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ui.*;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.SWT;


public class TaskListView extends ViewPart {
	private TableViewer viewer;
	
	private Action stopAction;
	private Action removeAction;
	private Action stopAllAction;
	private Action removeAllAction;
	private Action doubleClickAction;
	
	private TaskList taskList;
	 

	class ViewLabelProvider extends LabelProvider implements ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			return getText(obj);
		}
		
		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}
		
		public Image getImage(Object obj) {
			return AbstractUIPlugin.imageDescriptorFromPlugin("psynth", "src/icons/time.gif").createImage();
		}
	}

	
	public TaskListView() {
		setTitleImage(AbstractUIPlugin.imageDescriptorFromPlugin("psynth", "src/icons/pane_hide.gif").createImage());
		this.taskList = new TaskList();
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	public void createPartControl(Composite parent) {
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION | SWT.BORDER);
		viewer.setContentProvider(ArrayContentProvider.getInstance());
		viewer.setLabelProvider(new ViewLabelProvider());
		
		getSite().setSelectionProvider(viewer);
		makeActions();
		hookContextMenu();
		hookDoubleClickAction();
		contributeToActionBars();
	}
	
	public void refresh () {
		this.taskList.addTask(new Task(Task.Type.SYNTHESIS, Task.Status.RUNNING, "EngineX", "getMatrix", Arrays.asList("int", "float", "tuple2D"), "Mat2D"));
		List<task> taskList = this.taskList.asList();
		String[] list = new String[taskList.size()];
		
		for (int i = 0; i &lt; taskList.size(); i++) {
			list[i] = taskList.get(i).getType().toString()+ "  "  + "[" + taskList.get(i).getClassName() + " " + taskList.get(i).getMethodName() + " " + taskList.get(i).getParameterTypes() + " : " + taskList.get(i).getReturnType() + " ]";
		}
	
		viewer.setInput(list);
	}

	private void hookContextMenu() {
		MenuManager menuMgr = new MenuManager("#PopupMenu");
		menuMgr.setRemoveAllWhenShown(true);
		menuMgr.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager manager) {
				TaskListView.this.fillContextMenu(manager);
			}
		});
		Menu menu = menuMgr.createContextMenu(viewer.getControl());
		viewer.getControl().setMenu(menu);
		getSite().registerContextMenu(menuMgr, viewer);
	}

	private void contributeToActionBars() {
		IActionBars bars = getViewSite().getActionBars();
		fillLocalPullDown(bars.getMenuManager());
		fillLocalToolBar(bars.getToolBarManager());
	}

	private void fillLocalPullDown(IMenuManager manager) {
		manager.add(stopAction);
		manager.add(new Separator());
		manager.add(new Separator());
		manager.add(stopAllAction);
		manager.add(removeAction);
		manager.add(new Separator());
		manager.add(removeAllAction);
	}

	private void fillContextMenu(IMenuManager manager) {
		manager.add(stopAction);
		manager.add(stopAllAction);
		manager.add(removeAction);
		manager.add(removeAllAction);
		// Other plug-ins can contribute there actions here
		manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
	}
	
	private void fillLocalToolBar(IToolBarManager manager) {
		manager.add(stopAction);
		manager.add(stopAllAction);
		manager.add(removeAction);
		manager.add(removeAllAction);
	}

	private void makeActions() {
		
		this.stopAction = new Action() {
			public void run() {
				showMessage("Stop Task");
			}
		};
		this.stopAction.setText("Stop Task");
		this.stopAction.setToolTipText("Stop Task");
		this.stopAction.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin("psynth", "src/icons/terminate.gif"));
				
		
		this.removeAction = new Action() {
			public void run() {
				showMessage("Remove Task");
			}
		};
		this.removeAction.setText("Remove Task");
		this.removeAction.setToolTipText("Remove Task");
		this.removeAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_ELCL_REMOVE));

		this.stopAllAction = new Action() {
			public void run() {
				refresh();
			}
		};
		this.stopAllAction.setText("Stop All");
		this.stopAllAction.setToolTipText("Stop All");		
		this.stopAllAction.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin("psynth", "src/icons/terminate_all.gif"));
	
		
		this.removeAllAction = new Action() {
			public void run() {
				showMessage("Remove All executed");
			}
		};
		this.removeAllAction.setText("Remove All");
		this.removeAllAction.setToolTipText("Remove All");
		this.removeAllAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_ELCL_REMOVEALL));
		
		this.doubleClickAction = new Action() {
			public void run() {
				ISelection selection = viewer.getSelection();
				Object obj = ((IStructuredSelection)selection).getFirstElement();
				showMessage("Double-click detected on "+ obj.toString());
			}
		};
	}

	private void hookDoubleClickAction() {
		viewer.addDoubleClickListener(new IDoubleClickListener() {
			public void doubleClick(DoubleClickEvent event) {
				doubleClickAction.run();
			}
		});
	}
	
	private void showMessage(String message) {
		MessageDialog.openInformation(
			viewer.getControl().getShell(),
			"Task List View",
			message);
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}
}</task></p></body></html>
