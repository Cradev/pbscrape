<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>import os.path
from werkzeug.urls import url_fix
import json
from urllib.request import urlopen
import tmdbsimple as tmdb
from movielist.movielist.settings import BASE_DIR

tmdb.API_KEY = "86731d815e18438538974a6948b21371" # currently unused
db_path = os.path.join(BASE_DIR, "db.sqlite3")


def rating_finder(dataframe):
    """
    Function to invoke omdb API to find rottentomatoes "TomatoMeter" rating for all films in a given dataframe.
    :param dataframe: output of csvgetter_lists (or subsequently, combinedf) consisting of dataframe of exported
    icheckmovies toplists.
    :return: The same dataframe, with 'rt_meter' column attached (will take several minutes to run)
    """
    rows = dataframe.shape[0]
    dataframe['rt_meter'] = None
    dataframe['meta_rating'] = None
    dataframe['rt_rating'] = None

    dataframe['poster'] = None
    dataframe['plot'] = None
    dataframe['genre'] = None
    dataframe['tomato_url'] = None
    dataframe['type'] = None

    dataframe['imdb_votes'] = None
    dataframe['imdb_rating'] = None
    dataframe['static_poster']= None
    dataframe = dataframe.reset_index(drop=True)
    for i in range(rows):
    # for i in range(10):
        print(str(round(i/float(rows)*100,2)) + "%") # Progress bar
        year = str(dataframe.iloc[i]['year'])
        imdb_code = str(dataframe.iloc[i]['code'])
        imdb_code = str(imdb_code.split('/')[4]) # Split off the url from the imdb code
        posterstatic ="../static/posters/downloaded/" + imdb_code + ".jpg"

        url = 'http://www.omdbapi.com/?i=%s&amp;y=%s&amp;plot=full&amp;r=json&amp;tomatoes=true' % (imdb_code, year)
        response = urlopen(url).read().decode('utf8')
        obj = json.loads(response)
        try: obj["tomatoMeter"]
        except KeyError: # If code is not recognised, try title search
            title = str(dataframe.iloc[i]['title'])
            print("FAIL: " + title + year)
            url = 'http://www.omdbapi.com/?t=%s&amp;y=%s&amp;plot=full&amp;r=json&amp;tomatoes=true' % (title, year)
            url = url_fix(url)
            response = urlopen(url).read().decode('utf8')
            obj = json.loads(response)
            try: obj["tomatoMeter"]
            except KeyError: # If title search is not recognised, potentially use different API?
                print("2nd FAIL: " + title + year)
                break

        plot=str(obj["Plot"])
        plot_short = (plot[:200] + '...') if len(plot) &gt; 230 else plot

        dataframe.iloc[i, dataframe.columns.get_loc('static_poster')] = str(posterstatic)
        dataframe.iloc[i, dataframe.columns.get_loc('rt_meter')] = str(obj["tomatoMeter"])
        dataframe.iloc[i, dataframe.columns.get_loc('meta_rating')] = str(obj["Metascore"])
        dataframe.iloc[i, dataframe.columns.get_loc('rt_rating')] = str(obj["tomatoRating"])

        dataframe.iloc[i, dataframe.columns.get_loc('poster')] = str(obj["Poster"])
        dataframe.iloc[i, dataframe.columns.get_loc('plot')] = str(plot_short)
        dataframe.iloc[i, dataframe.columns.get_loc('genre')] = str(obj["Genre"])
        dataframe.iloc[i, dataframe.columns.get_loc('tomato_url')] = str(obj["tomatoURL"])
        dataframe.iloc[i, dataframe.columns.get_loc('type')] = str(obj["Type"])

        dataframe.iloc[i, dataframe.columns.get_loc('imdb_votes')] = str(obj["imdbVotes"])
        try: dataframe.iloc[i, dataframe.columns.get_loc('imdb_rating')] = float(obj["imdbRating"])
        except ValueError:
            print(url)
    # print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    return(dataframe)</p></body></html>
