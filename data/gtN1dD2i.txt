<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class DLLNode<e> {
	protected E element;
	protected DLLNode<e> pred, succ;

	public DLLNode(E elem, DLLNode<e> pred, DLLNode<e> succ) {
		this.element = elem;
		this.pred = pred;
		this.succ = succ;
	}

	@Override
	public String toString() {
		return element.toString();
	}
}
class DLL<e> {
	private DLLNode<e> first, last;

	public DLL() {
		// Construct an empty SLL
		this.first = null;
		this.last = null;
	}

	public void deleteList() {
		first = null;
		last = null;
	}
	
	public int length() {
		int ret;
		if (first != null) {
			DLLNode<e> tmp = first;
			ret = 1;
			while (tmp.succ != null) {
				tmp = tmp.succ;
				ret++;
			}
			return ret;
		} else
			return 0;

	}

	public DLLNode<e> find(E o) {
		if (first != null) {
			DLLNode<e> tmp = first;
			while (tmp.element != o&amp;&amp;tmp.succ != null)
				tmp = tmp.succ;
			if (tmp.element == o) {
				return tmp;
			} else {
				System.out.println("Elementot ne postoi vo listata");
			}
		} else {
			System.out.println("Listata e prazna");
		}
		return first;
	}
	
	public void insertFirst(E o) {
		DLLNode<e> ins = new DLLNode<e>(o, null, first);
		if (first == null)
			last = ins;
		else
			first.pred = ins;
		first = ins;
	}

	public void insertLast(E o) {
		if (first == null)
			insertFirst(o);
		else {
			DLLNode<e> ins = new DLLNode<e>(o, last, null);
			last.succ = ins;
			last = ins;
		}
	}

	public void insertAfter(E o, DLLNode<e> after) {
		if(after==last){
			insertLast(o);
			return;
		}
		DLLNode<e> ins = new DLLNode<e>(o, after, after.succ);
		after.succ.pred = ins;
		after.succ = ins;
	}

	public void insertBefore(E o, DLLNode<e> before) {
		if(before == first){
			insertFirst(o);
			return;
		}
		DLLNode<e> ins = new DLLNode<e>(o, before.pred, before);
		before.pred.succ = ins;
		before.pred = ins;
	}

	public E deleteFirst() {
		if (first != null) {
			DLLNode<e> tmp = first;
			first = first.succ;
			if (first != null) first.pred = null;
			if (first == null)
				last = null;
			return tmp.element;
		} else
			return null;
	}

	public E deleteLast() {
		if (first != null) {
			if (first.succ == null)
				return deleteFirst();
			else {
				DLLNode<e> tmp = last;
				last = last.pred;
				last.succ = null;
				return tmp.element;
			}
		}
		// else throw Exception
		return null;
	}

	public E delete(DLLNode<e> node) {
		if(node==first){
			deleteFirst();
			return node.element;
		}
		if(node==last){
			deleteLast();
			return node.element;
		}
		node.pred.succ = node.succ;
		node.succ.pred = node.pred;
		return node.element;
		
	}

	@Override
	public String toString() {
		String ret = new String();
		if (first != null) {
			DLLNode<e> tmp = first;
			ret += tmp + " ";
			while (tmp.succ != null) {
				tmp = tmp.succ;
				ret += tmp + " ";
			}
		} else
			ret ="";
		return ret;
	}
	
	public String toStringR() {
		String ret = new String();
		if (last != null) {
			DLLNode<e> tmp = last;
			ret += tmp + "";
			while (tmp.pred != null) {
				tmp = tmp.pred;
				ret += tmp + "";
			}
		} else
			ret ="";
		return ret;
	}

	public DLLNode<e> getFirst() {
		return first;
	}

	public DLLNode<e> getLast() {

		return last;
	}
	
	public void izvadiDupliIPrebroj(){
		
	}
}

    
	


public class DivideOddEven {
	
    
    	public static void DLLParniNeparni(DLL<integer> lista,DLL<integer> parnaL,DLL<integer> neparL)
	{
		DLLNode<integer> tmp=lista.getFirst();
		while(tmp!=null)
		{
			if(tmp.element%2==0)
			{
				parnaL.insertLast(tmp.element);
			}
			else
			{
				neparL.insertLast(tmp.element);
			}
				tmp=tmp.succ;
		}
	}


	public static void main(String[] args) throws IOException {
		
		BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
                DLL <integer> lista1=new DLL();
                DLL <integer> lista2=new DLL();
                DLL <integer> lista3=new DLL();
      
		String s = stdin.readLine();
		int N = Integer.parseInt(s);
		s = stdin.readLine();
		String[] pomniza = s.split(" ");
		for (int i = 0; i &lt; N; i++) {
           
			lista1.insertLast(Integer.parseInt(pomniza[i]));
		}
        
        DLLParniNeparni(lista1,lista2,lista3);
           System.out.println(lista3);
        System.out.println(lista2);
     
            
            
}
}</integer></integer></integer></integer></integer></integer></integer></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></e></p></body></html>
