<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>Laboratory Work no. 1
Timis Achim - 935,lab 1

1. Minilanguage Specification
-----------------------------
var = "var".
digit = 0 | 1 | 2 | 3...9.
nonZeroDigits= 1 | 2 | 3 | .. 9 .
letter  = "a" | "b" | "c" | ... "z".
symbol = "!" | "@" | .. "&amp;".
constant = integer.
character = letter | digit | symbol.
string = character {string}.
semiColon = ";".
dot = ".".
colon = ":".
equals = "=".
begin = "begin".
end = "end".
plusSymbol = "+".
assignmentSymbol = ":=".
operationSymbol = "+" | "-" | "*" | "/".
plusMinusSymbol = "+" | "-".
multiplyDivideSymbol= "*" | "/".
if = "if".
then = "then".
else = "else".
openBracket = "(".
closeBracket = ")".
read = "read".
write = "write".
while = "while".
minusSymbol = "-".
relation = "" | "&gt;=" | "&gt;".
boolean = "true" | "false".


integer = positiveNumber | negativeNumber | 0.
positiveNumber =  [plusSymbol] nonZeroDigits {digit}.
negativeNumber = minusSymbol nonZeroDigits {digit}.

program = var declarationList semiColon compoundStatement dot.

declarationList = declaration { declaration }.
declaration  = type colon identifier | identifier.
identifier = letter { identifierSequence }.
identifierSequence =  { letter | digit | symbol }.
type = basicType | arrayType.
basicType =  boolean | character | integer | string.
arrayType = "ARRAY" "[" digit "]" "OF" basicType.

compoundStatement = begin statementList { statementList} end.
statementList = statement { semiColon statement}.
statement = simpleStatement | structureStatement.
simpleStatement = assignmentStatement | IOStatement.
assignmentStatement = identifier assignmentSymbol expression.
expression = expression plusMinusSymbol term | term.
term = term multiplyDivideSymbol factor | factor.
factor = openBracket expression closeBracket | identifier | constant.

structureStatement = compoundStatement | ifStatement | 	whileStatement.


ifStatement = if condition then statement [else statement].

IOStatement = readStatement | writeStatement.
readStatement = read openBracket indentifier closeBracket semiColon.
writeStatement = write openBracket expression closeBracket semiColon.

whileStatement = while condition do expression.
condition = expression relation expression.


Codification:
-------------------------
| Token type	|   code |
-------------------------
| identifier	|    0  |
-------------------------
| constant	|    1  |
-------------------------
| program       |    2  |
-------------------------
| array	|    3  |
-------------------------
| of		|    4  |
-------------------------
| var	|    5  |
-------------------------
| integer      |    6  |
-------------------------
| real  	|    7  |
-------------------------
| boolean       |    8  |
-------------------------
| begin 	|    9  |
-------------------------
| end		|   10  |
-------------------------
|read		|   11  |
-------------------------
|write 		|   12  |
-------------------------
| while		|   13  |
-------------------------
| to		|   14  |
-------------------------
| do 		|   15  |
-------------------------
| if		|   16  |
-------------------------
| then		|   17  |
-------------------------
|  else  	|   18  |
-------------------------
| :		|   22  |
-------------------------
| ;		|   23  |
-------------------------
| ,     	|   24  |
-------------------------
| .		|   25  |
-------------------------
| +		|   26  |
-------------------------
| * 		|   27  |
-------------------------
| (		|   28  |
-------------------------
| )		|   29  |
-------------------------
| [		|   30  |
-------------------------
| ]     	|   31  |
-------------------------
| -		|   32  |
-------------------------
| &lt;     	|   33  |
-------------------------
| &gt;		|   34  |
-------------------------
| =		|   35  |
-------------------------
| := 		|   36  |
-------------------------</p></body></html>
