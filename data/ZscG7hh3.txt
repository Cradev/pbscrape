<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>/*
 * File: StoneMasonKarel.java
 * --------------------------
 * The StoneMasonKarel subclass as it appears here does nothing.
 * When you finish writing it, it should solve the "repair the quad"
 * problem from Assignment 1.  In addition to editing the program,
 * you should be sure to edit this comment so that it no longer
 * indicates that the program does nothing.
 */

import stanford.karel.*;

public class StoneMasonKarel extends SuperKarel {

	public void run() {
		fillTheFirstWall();
		comeBackToStartPoint();
		fillOtherwalls();
	}

	/*
	 * precondition:karel stands at (1:1) point,facing east and first wall is
	 * already built.
	 * postcondition:karel does the four moving ,comes to the
	 * next wall and rebuilds it.karel is doing it until all the walls will be
	 * rebuild.
	 */
	private void fillOtherwalls() {
		while (frontIsClear()) {
			for (int i = 0; i &lt; 3; i++) {
				if (frontIsClear()) {
					move();
				}
			}
			if (frontIsClear()) {
				move();
				turnLeft();
				if (noBeepersPresent()) {
					putBeeper();
				}
				while (frontIsClear()) {
					if (beepersPresent()) {
						move();
					} else {
						putBeeper();
						move();
					}
					if (noBeepersPresent()) {
						putBeeper();
					}
				}
				comeBackToStartPoint();
			}
		}
	}

	/*
	 * precondition:Karel stands at start point,facing east postcondition:Karel
	 * has built the first wall and stands at the top of the wall,facing north.
	 */
	private void fillTheFirstWall() {
		turnLeft();
		if (beepersPresent()) {
			move();
		} else {
			putBeeper();
		}
		while (frontIsClear()) {
			if (beepersPresent()) {
				move();
			} else {
				putBeeper();
				move();
			}
			if (noBeepersPresent()) {
				putBeeper();
			}
		}
	}

	/*
	 * precondition:Karel has already built the first wall and stands at the top
	 * of the wall,facing north 
	 * postcondition:after building the wall, Karel
	 * comes back to start point,facing east.
	 */
	private void comeBackToStartPoint() {
		turnLeft();
		turnLeft();
		while (frontIsClear()) {
			move();
		}
		turnLeft();
	}

}</p></body></html>
