<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>//#include "stdafx.h"
#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <conio.h>
#include <mpi.h>

using namespace std;

int main(int argc, char* argv[])
{

	int i, j, k, i1, i2, n;
	int array3[60][60];
	int array4[60][60];
	int array1[60][60]; // &#1086;&#1073;&#1098;&#1103;&#1074;&#1083;&#1103;&#1077;&#1084; &#1094;&#1077;&#1083;&#1086;&#1095;&#1080;&#1089;&#1083;&#1077;&#1085;&#1085;&#1099;&#1081; &#1084;&#1072;&#1089;&#1089;&#1080;&#1074;
	int array2[60][60];
	double start_time, end_time;
	int rank, size;
	//MPI_Status Status;
	//MPI_Request Request;
	MPI_Init(&amp;argc, &amp;argv);
	MPI_Comm_size(MPI_COMM_WORLD, &amp;size);
	MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);

	//start_time = MPI_Wtime();

	random_access_iterator_tag;
	if (rank == 0)
	{
		cout &lt;&lt; "Enter number i: " &lt;&lt; endl;
		cin &gt;&gt; i;
		cout &lt;&lt; "Enter number j: " &lt;&lt; endl;
		cin &gt;&gt; j;
		cout &lt;&lt; "Enter number k: " &lt;&lt; endl;
		cin &gt;&gt; k;
		cout &lt;&lt; "Enter elementi massiva: " &lt;&lt; endl;
		for (int a = 0; a &lt; i; a++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1089;&#1095;&#1080;&#1090;&#1099;&#1074;&#1072;&#1085;&#1080;&#1103; &#1095;&#1080;&#1089;&#1077;&#1083;
			for (int b = 0; b &lt; j; b++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1089;&#1095;&#1080;&#1090;&#1099;&#1074;&#1072;&#1085;&#1080;&#1103; &#1095;&#1080;&#1089;&#1077;&#1083;
			{
				array1[a][b] = rand() % 10;
			}
		//cin &gt;&gt; array1[a][b];
		cout &lt;&lt; "array1 = {";
		cout &lt;&lt; "\n";
		for (int a = 0; a &lt; i; a++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1074;&#1099;&#1074;&#1086;&#1076;&#1072; &#1101;&#1083;&#1077;&#1084;&#1077;&#1085;&#1090;&#1086;&#1074; &#1084;&#1072;&#1089;&#1089;&#1080;&#1074;&#1072;
		{
			for (int b = 0; b &lt; j; b++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1074;&#1099;&#1074;&#1086;&#1076;&#1072; &#1101;&#1083;&#1077;&#1084;&#1077;&#1085;&#1090;&#1086;&#1074; &#1084;&#1072;&#1089;&#1089;&#1080;&#1074;&#1072;
				cout &lt;&lt; array1[a][b] &lt;&lt; "   ";
			cout &lt;&lt; "\n";
		}

		for (int b = 0; b &lt; j; b++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1089;&#1095;&#1080;&#1090;&#1099;&#1074;&#1072;&#1085;&#1080;&#1103; &#1095;&#1080;&#1089;&#1077;&#1083;
			for (int c = 0; c &lt; k; c++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1089;&#1095;&#1080;&#1090;&#1099;&#1074;&#1072;&#1085;&#1080;&#1103; &#1095;&#1080;&#1089;&#1077;&#1083;
			{
				array2[b][c] = rand() % 10;
			}
		cout &lt;&lt; "array2 = {";
		cout &lt;&lt; "\n";
		for (int b = 0; b &lt; j; b++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1074;&#1099;&#1074;&#1086;&#1076;&#1072; &#1101;&#1083;&#1077;&#1084;&#1077;&#1085;&#1090;&#1086;&#1074; &#1084;&#1072;&#1089;&#1089;&#1080;&#1074;&#1072;
		{
			for (int c = 0; c &lt; k; c++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1074;&#1099;&#1074;&#1086;&#1076;&#1072; &#1101;&#1083;&#1077;&#1084;&#1077;&#1085;&#1090;&#1086;&#1074; &#1084;&#1072;&#1089;&#1089;&#1080;&#1074;&#1072;
				cout &lt;&lt; array2[b][c] &lt;&lt; "   ";
			cout &lt;&lt; "\n";
		}


		MPI_Bcast(array1, i*j, MPI_INT, 0, MPI_COMM_WORLD);

	}

	start_time = MPI_Wtime();
	n = i / size;
	i1 = n * rank;
	i2 = (n * rank) + 1;
	if (rank == size - 1)
		i2 = i;
	for (int a = i1; a &lt; i2; a++)
		for (int c = 0; c &lt; k; c++)
		{
			array3[a][c] = 0;
			for (int b = 0; b &lt; j; b++)
				array3[a][c] += array1[a][b] * array2[b][c];
		}

	MPI_Gather(&amp;array3, i*k, MPI_INT, &amp;array4, i*k, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank == 0)
	{
		cout &lt;&lt; "array3 = {";
		cout &lt;&lt; "\n";
		for (int a = 0; a &lt; i; a++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1074;&#1099;&#1074;&#1086;&#1076;&#1072; &#1101;&#1083;&#1077;&#1084;&#1077;&#1085;&#1090;&#1086;&#1074; &#1084;&#1072;&#1089;&#1089;&#1080;&#1074;&#1072;
		{
			for (int c = 0; c &lt; k; c++) // &#1094;&#1080;&#1082;&#1083; &#1076;&#1083;&#1103; &#1074;&#1099;&#1074;&#1086;&#1076;&#1072; &#1101;&#1083;&#1077;&#1084;&#1077;&#1085;&#1090;&#1086;&#1074; &#1084;&#1072;&#1089;&#1089;&#1080;&#1074;&#1072;
				cout &lt;&lt; array4[a][c] &lt;&lt; "   ";
			cout &lt;&lt; "\n";
		}
	}
	end_time = MPI_Wtime();
	printf("Total time = %f\n", end_time - start_time);
	//MPI_Reduce(&amp;A, &amp;array3[a][c], 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
	MPI_Finalize();
	system("pause");
	return 0;
}</mpi.h></conio.h></stdio.h></stdlib.h></iostream></p></body></html>
