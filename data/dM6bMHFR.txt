<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p>public static List<string> ParseLine(string line)
		{
			Stack stack = new Stack<tuple int>&gt;();// &#1069;&#1090;&#1086; &#1089;&#1090;&#1077;&#1082; :)
			List<token> tokens = new List<token>();// &#1069;&#1090;&#1086; &#1088;&#1077;&#1079;&#1091;&#1083;&#1100;&#1090;&#1080;&#1088;&#1091;&#1102;&#1097;&#1080;&#1081; &#1089;&#1087;&#1080;&#1089;&#1086;&#1082; &#1090;&#1086;&#1082;&#1077;&#1085;&#1086;&#1074;.
			// &#1053;&#1086; &#1074;&#1077;&#1088;&#1085;&#1091;&#1090;&#1100; &#1085;&#1091;&#1078;&#1085;&#1086; &#1089;&#1087;&#1080;&#1089;&#1086;&#1082; &#1089;&#1090;&#1088;&#1086;&#1082;, &#1079;&#1085;&#1072;&#1095;&#1080;&#1090; &#1085;&#1072;&#1076;&#1086; &#1082;&#1072;&#1082;-&#1090;&#1086; &#1087;&#1077;&#1088;&#1077;&#1082;&#1086;&#1085;&#1074;&#1077;&#1088;&#1090;&#1080;&#1088;&#1086;&#1074;&#1072;&#1090;&#1100; &#1090;&#1086;&#1082;&#1077;&#1085;&#1099; &#1074; &#1090;&#1088;&#1086;&#1082;&#1080;,
			// &#1074; &#1079;&#1072;&#1074;&#1080;&#1089;&#1080;&#1084;&#1086;&#1089;&#1090;&#1080; &#1086;&#1090; &#1090;&#1086;&#1075;&#1086;, &#1095;&#1090;&#1086; &#1085;&#1091;&#1078;&#1085;&#1086; &#1074;&#1077;&#1088;&#1085;&#1091;&#1090;&#1100;.
			Tuple<char int> topItem = null;
			for (int i = 0; i &lt;= line.Length; i++)
			{
				try
				{
					Tuple<char int> topItem = stack.Peek();
				}
				catch (InvalidOperationException ex)
				{
					topItem = null;
				}
				switch line[i]
				{
					case '"':
						if (topItem != null &amp;&amp; topItem.Item1 == '"')// &#1055;&#1088;&#1086;&#1074;&#1077;&#1088;&#1103;&#1077;&#1084;, &#1095;&#1090;&#1086; &#1085;&#1072; &#1074;&#1077;&#1088;&#1096;&#1080;&#1085;&#1077; &#1089;&#1090;&#1077;&#1082;&#1072;.
						{
							tokens.Add(ReadField(line.Substring(topItem.Item2+1, i-topItem.Item2)));// &#1052;&#1086;&#1075; &#1086;&#1096;&#1080;&#1073;&#1080;&#1090;&#1100;&#1089;&#1103; &#1089; &#1080;&#1085;&#1076;&#1077;&#1082;&#1089;&#1072;&#1084;&#1080;.
							stack.Pop();
							topItem = stack.Peek();
						}
						else if (topItem != null)
						{
							// &#1053;&#1072;&#1095;&#1080;&#1085;&#1072;&#1077;&#1084; &#1085;&#1072;&#1082;&#1072;&#1087;&#1083;&#1080;&#1074;&#1072;&#1090;&#1100; &#1090;&#1086;&#1082;&#1077;&#1085;.
							stack.Push(new Tuple<char int>('"', i));
						}
						break;
					case '\'':
						// &#1047;&#1076;&#1077;&#1089;&#1100; &#1090;&#1086; &#1078;&#1077; &#1089;&#1072;&#1084;&#1086;&#1077;, &#1090;&#1086;&#1083;&#1100;&#1082;&#1086; &#1089; &#1086;&#1076;&#1080;&#1085;&#1072;&#1088;&#1085;&#1086;&#1081; &#1082;&#1072;&#1074;&#1099;&#1095;&#1082;&#1086;&#1081;.
						// &#1044;&#1091;&#1073;&#1083;&#1080;&#1088;&#1086;&#1074;&#1072;&#1085;&#1080;&#1077; &#1082;&#1086;&#1076;&#1072;, &#1103;&#1074;&#1085;&#1086; &#1085;&#1072;&#1076;&#1086; &#1082;&#1072;&#1082;&#1091;&#1102;-&#1090;&#1086; &#1076;&#1077;&#1082;&#1086;&#1084;&#1087;&#1086;&#1079;&#1080;&#1094;&#1080;&#1102; &#1087;&#1088;&#1080;&#1084;&#1077;&#1085;&#1080;&#1090;&#1100;.
						if (topItem != null &amp;&amp; topItem.Item1 == '\'')
						{
							tokens.Add(ReadField(line.Substring(topItem.Item2+1, i-topItem.Item2)));
							stack.Pop();
							topItem = stack.Peek();
						}
						else if (topItem != null)
						{
							stack.Push(new Tuple<char int>('\'', i));
						}
						break;
					case ' ':
						if (topItem != null &amp;&amp; topItem.Item1 == ' ')
						{
							tokens.Add(ReadField(line.Substring(topItem.Item2+1, i-topItem.Item2)));
							stack.Pop();
							stack.Push(new Tuple<char int>(' ', i));
							topItem = stack.Peek();
						}
						else if (stack.Length == 0)// &#1057;&#1083;&#1091;&#1095;&#1072;&#1081; &#1089;&#1072;&#1084;&#1086;&#1075;&#1086; &#1087;&#1077;&#1088;&#1074;&#1086;&#1075;&#1086; &#1087;&#1088;&#1086;&#1089;&#1090;&#1086;&#1075;&#1086; &#1087;&#1086;&#1083;&#1103; &#1074; &#1089;&#1090;&#1088;&#1086;&#1082;&#1077;.
						{
							tokens.Add(ReadField(line.Substring(0, i)));
							stack.Push(new Tuple<char int>(' ', i));
						}
						break;
					case '\\':
						i++;
						break;
				}
			}
			return new List<string> {line}; // &#1089;&#1086;&#1082;&#1088;&#1072;&#1097;&#1077;&#1085;&#1085;&#1099;&#1081; &#1089;&#1080;&#1085;&#1090;&#1072;&#1082;&#1089;&#1080;&#1089; &#1076;&#1083;&#1103; &#1080;&#1085;&#1080;&#1094;&#1080;&#1072;&#1083;&#1080;&#1079;&#1072;&#1094;&#1080;&#1080; &#1082;&#1086;&#1083;&#1083;&#1077;&#1082;&#1094;&#1080;&#1080;.
		}</string></char></char></char></char></char></char></token></token></tuple></string></p></body></html>
